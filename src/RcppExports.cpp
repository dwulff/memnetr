// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// count_assos_directed
DataFrame count_assos_directed(StringVector cues, StringVector responses);
RcppExport SEXP _memnetr_count_assos_directed(SEXP cuesSEXP, SEXP responsesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type cues(cuesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type responses(responsesSEXP);
    rcpp_result_gen = Rcpp::wrap(count_assos_directed(cues, responses));
    return rcpp_result_gen;
END_RCPP
}
// count_assos_undirected
DataFrame count_assos_undirected(StringVector cues, StringVector responses);
RcppExport SEXP _memnetr_count_assos_undirected(SEXP cuesSEXP, SEXP responsesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type cues(cuesSEXP);
    Rcpp::traits::input_parameter< StringVector >::type responses(responsesSEXP);
    rcpp_result_gen = Rcpp::wrap(count_assos_undirected(cues, responses));
    return rcpp_result_gen;
END_RCPP
}
// determine_indices
std::map<std::string, int> determine_indices(std::vector<std::string> words);
RcppExport SEXP _memnetr_determine_indices(SEXP wordsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type words(wordsSEXP);
    rcpp_result_gen = Rcpp::wrap(determine_indices(words));
    return rcpp_result_gen;
END_RCPP
}
// get_A
NumericVector get_A(std::vector<std::string> cues, std::vector<std::string> responses);
RcppExport SEXP _memnetr_get_A(SEXP cuesSEXP, SEXP responsesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type cues(cuesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type responses(responsesSEXP);
    rcpp_result_gen = Rcpp::wrap(get_A(cues, responses));
    return rcpp_result_gen;
END_RCPP
}
// rowsums
NumericVector rowsums(NumericMatrix A);
RcppExport SEXP _memnetr_rowsums(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(rowsums(A));
    return rcpp_result_gen;
END_RCPP
}
// colsums
NumericVector colsums(NumericMatrix A);
RcppExport SEXP _memnetr_colsums(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(colsums(A));
    return rcpp_result_gen;
END_RCPP
}
// P_from_A
NumericMatrix P_from_A(NumericMatrix A);
RcppExport SEXP _memnetr_P_from_A(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(P_from_A(A));
    return rcpp_result_gen;
END_RCPP
}
// PPMI_from_P
NumericMatrix PPMI_from_P(NumericMatrix P);
RcppExport SEXP _memnetr_PPMI_from_P(SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(PPMI_from_P(P));
    return rcpp_result_gen;
END_RCPP
}
// get_P
NumericVector get_P(std::vector<std::string> cues, std::vector<std::string> responses);
RcppExport SEXP _memnetr_get_P(SEXP cuesSEXP, SEXP responsesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type cues(cuesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type responses(responsesSEXP);
    rcpp_result_gen = Rcpp::wrap(get_P(cues, responses));
    return rcpp_result_gen;
END_RCPP
}
// get_PPMI
NumericVector get_PPMI(std::vector<std::string> cues, std::vector<std::string> responses);
RcppExport SEXP _memnetr_get_PPMI(SEXP cuesSEXP, SEXP responsesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type cues(cuesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type responses(responsesSEXP);
    rcpp_result_gen = Rcpp::wrap(get_PPMI(cues, responses));
    return rcpp_result_gen;
END_RCPP
}
// get_cosines
NumericVector get_cosines(NumericMatrix A);
RcppExport SEXP _memnetr_get_cosines(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(get_cosines(A));
    return rcpp_result_gen;
END_RCPP
}
// normalize
std::vector<double> normalize(std::vector<double> vec);
RcppExport SEXP _memnetr_normalize(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(normalize(vec));
    return rcpp_result_gen;
END_RCPP
}
// chunk
std::vector<double> chunk(const std::vector<double>& a, const std::vector<double>& b);
RcppExport SEXP _memnetr_chunk(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(chunk(a, b));
    return rcpp_result_gen;
END_RCPP
}
// chunk_norm
std::vector<double> chunk_norm(const std::vector<double>& a, const std::vector<double>& b);
RcppExport SEXP _memnetr_chunk_norm(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(chunk_norm(a, b));
    return rcpp_result_gen;
END_RCPP
}
// make_word
std::vector<double> make_word(int k);
RcppExport SEXP _memnetr_make_word(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(make_word(k));
    return rcpp_result_gen;
END_RCPP
}
// split_string_list
GenericVector split_string_list(GenericVector sents, GenericVector indices);
RcppExport SEXP _memnetr_split_string_list(SEXP sentsSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type sents(sentsSEXP);
    Rcpp::traits::input_parameter< GenericVector >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(split_string_list(sents, indices));
    return rcpp_result_gen;
END_RCPP
}
// beagle_basis
GenericVector beagle_basis(GenericVector sents, GenericVector indices, std::vector<std::string> targets);
RcppExport SEXP _memnetr_beagle_basis(SEXP sentsSEXP, SEXP indicesSEXP, SEXP targetsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type sents(sentsSEXP);
    Rcpp::traits::input_parameter< GenericVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type targets(targetsSEXP);
    rcpp_result_gen = Rcpp::wrap(beagle_basis(sents, indices, targets));
    return rcpp_result_gen;
END_RCPP
}
// beagle_basis_stops
GenericVector beagle_basis_stops(std::vector<std::string> sents, GenericVector indices, std::vector<std::string> targets, std::vector<std::string> stops);
RcppExport SEXP _memnetr_beagle_basis_stops(SEXP sentsSEXP, SEXP indicesSEXP, SEXP targetsSEXP, SEXP stopsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type sents(sentsSEXP);
    Rcpp::traits::input_parameter< GenericVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type targets(targetsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type stops(stopsSEXP);
    rcpp_result_gen = Rcpp::wrap(beagle_basis_stops(sents, indices, targets, stops));
    return rcpp_result_gen;
END_RCPP
}
// beagle_con
NumericMatrix beagle_con(GenericVector sents, GenericVector indices, int n_target, int d, bool missing);
RcppExport SEXP _memnetr_beagle_con(SEXP sentsSEXP, SEXP indicesSEXP, SEXP n_targetSEXP, SEXP dSEXP, SEXP missingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type sents(sentsSEXP);
    Rcpp::traits::input_parameter< GenericVector >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< int >::type n_target(n_targetSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< bool >::type missing(missingSEXP);
    rcpp_result_gen = Rcpp::wrap(beagle_con(sents, indices, n_target, d, missing));
    return rcpp_result_gen;
END_RCPP
}
// cosine
double cosine(NumericVector a, NumericVector b);
RcppExport SEXP _memnetr_cosine(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(cosine(a, b));
    return rcpp_result_gen;
END_RCPP
}
// cosine_mat
NumericMatrix cosine_mat(NumericMatrix representation);
RcppExport SEXP _memnetr_cosine_mat(SEXP representationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type representation(representationSEXP);
    rcpp_result_gen = Rcpp::wrap(cosine_mat(representation));
    return rcpp_result_gen;
END_RCPP
}
// upper_mat
NumericVector upper_mat(NumericMatrix mat);
RcppExport SEXP _memnetr_upper_mat(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(upper_mat(mat));
    return rcpp_result_gen;
END_RCPP
}
// seed
NumericMatrix seed(int n, int m);
RcppExport SEXP _memnetr_seed(SEXP nSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(seed(n, m));
    return rcpp_result_gen;
END_RCPP
}
// sm
int sm(NumericVector x);
RcppExport SEXP _memnetr_sm(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sm(x));
    return rcpp_result_gen;
END_RCPP
}
// getdegrees
std::vector<int> getdegrees(NumericMatrix adj, int pos);
RcppExport SEXP _memnetr_getdegrees(SEXP adjSEXP, SEXP posSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< int >::type pos(posSEXP);
    rcpp_result_gen = Rcpp::wrap(getdegrees(adj, pos));
    return rcpp_result_gen;
END_RCPP
}
// getnonneighbors
std::vector<int> getnonneighbors(NumericMatrix adj, int node);
RcppExport SEXP _memnetr_getnonneighbors(SEXP adjSEXP, SEXP nodeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< int >::type node(nodeSEXP);
    rcpp_result_gen = Rcpp::wrap(getnonneighbors(adj, node));
    return rcpp_result_gen;
END_RCPP
}
// selectnode
int selectnode(std::vector<int> ps);
RcppExport SEXP _memnetr_selectnode(SEXP psSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type ps(psSEXP);
    rcpp_result_gen = Rcpp::wrap(selectnode(ps));
    return rcpp_result_gen;
END_RCPP
}
// stgame
NumericMatrix stgame(int n, int m);
RcppExport SEXP _memnetr_stgame(SEXP nSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(stgame(n, m));
    return rcpp_result_gen;
END_RCPP
}
// emptyseed
NumericMatrix emptyseed(int n);
RcppExport SEXP _memnetr_emptyseed(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(emptyseed(n));
    return rcpp_result_gen;
END_RCPP
}
// puni
double puni();
RcppExport SEXP _memnetr_puni() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(puni());
    return rcpp_result_gen;
END_RCPP
}
// unconnectedneighbor
int unconnectedneighbor(NumericMatrix adj, int from, int to);
RcppExport SEXP _memnetr_unconnectedneighbor(SEXP adjSEXP, SEXP fromSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< int >::type from(fromSEXP);
    Rcpp::traits::input_parameter< int >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(unconnectedneighbor(adj, from, to));
    return rcpp_result_gen;
END_RCPP
}
// test
void test(int n, int m);
RcppExport SEXP _memnetr_test(SEXP nSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    test(n, m);
    return R_NilValue;
END_RCPP
}
// hkgame
NumericMatrix hkgame(int n, int m, double p);
RcppExport SEXP _memnetr_hkgame(SEXP nSEXP, SEXP mSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(hkgame(n, m, p));
    return rcpp_result_gen;
END_RCPP
}
// set
std::vector<std::string> set(std::vector<std::string> v);
RcppExport SEXP _memnetr_set(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(set(v));
    return rcpp_result_gen;
END_RCPP
}
// mset
std::vector<std::string> mset(GenericVector dat);
RcppExport SEXP _memnetr_mset(SEXP datSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type dat(datSEXP);
    rcpp_result_gen = Rcpp::wrap(mset(dat));
    return rcpp_result_gen;
END_RCPP
}
// indx
int indx(std::string s, std::vector<std::string> set);
RcppExport SEXP _memnetr_indx(SEXP sSEXP, SEXP setSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type set(setSEXP);
    rcpp_result_gen = Rcpp::wrap(indx(s, set));
    return rcpp_result_gen;
END_RCPP
}
// lags
GenericVector lags(GenericVector dat, int l, bool na_rm);
RcppExport SEXP _memnetr_lags(SEXP datSEXP, SEXP lSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type dat(datSEXP);
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(lags(dat, l, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// strsplit
std::vector<std::string> strsplit(const std::string& s, const std::string& delim);
RcppExport SEXP _memnetr_strsplit(SEXP sSEXP, SEXP delimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type delim(delimSEXP);
    rcpp_result_gen = Rcpp::wrap(strsplit(s, delim));
    return rcpp_result_gen;
END_RCPP
}
// getinds
NumericMatrix getinds(std::vector<std::string> pairs, std::vector<std::string> unis);
RcppExport SEXP _memnetr_getinds(SEXP pairsSEXP, SEXP unisSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type pairs(pairsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type unis(unisSEXP);
    rcpp_result_gen = Rcpp::wrap(getinds(pairs, unis));
    return rcpp_result_gen;
END_RCPP
}
// getpairs
CharacterMatrix getpairs(std::vector<std::string> spairs, std::string del);
RcppExport SEXP _memnetr_getpairs(SEXP spairsSEXP, SEXP delSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type spairs(spairsSEXP);
    Rcpp::traits::input_parameter< std::string >::type del(delSEXP);
    rcpp_result_gen = Rcpp::wrap(getpairs(spairs, del));
    return rcpp_result_gen;
END_RCPP
}
// count
std::vector<int> count(std::vector<std::string> v);
RcppExport SEXP _memnetr_count(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(count(v));
    return rcpp_result_gen;
END_RCPP
}
// range
std::vector<int> range(int n);
RcppExport SEXP _memnetr_range(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(range(n));
    return rcpp_result_gen;
END_RCPP
}
// get_indices
std::vector<int> get_indices(int n, int use);
RcppExport SEXP _memnetr_get_indices(SEXP nSEXP, SEXP useSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type use(useSEXP);
    rcpp_result_gen = Rcpp::wrap(get_indices(n, use));
    return rcpp_result_gen;
END_RCPP
}
// cut_stringvec
std::vector<std::string> cut_stringvec(std::vector<std::string> items, std::vector<int> indices);
RcppExport SEXP _memnetr_cut_stringvec(SEXP itemsSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type items(itemsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(cut_stringvec(items, indices));
    return rcpp_result_gen;
END_RCPP
}
// cut_dat
GenericVector cut_dat(GenericVector dat, GenericVector inds, std::vector<int> indices);
RcppExport SEXP _memnetr_cut_dat(SEXP datSEXP, SEXP indsSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type dat(datSEXP);
    Rcpp::traits::input_parameter< GenericVector >::type inds(indsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(cut_dat(dat, inds, indices));
    return rcpp_result_gen;
END_RCPP
}
// mcount
std::vector<int> mcount(GenericVector dat);
RcppExport SEXP _memnetr_mcount(SEXP datSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type dat(datSEXP);
    rcpp_result_gen = Rcpp::wrap(mcount(dat));
    return rcpp_result_gen;
END_RCPP
}
// getprob
NumericVector getprob(std::vector<int> counts, double N);
RcppExport SEXP _memnetr_getprob(SEXP countsSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< double >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(getprob(counts, N));
    return rcpp_result_gen;
END_RCPP
}
// pinwin
double pinwin(double n, double l);
RcppExport SEXP _memnetr_pinwin(SEXP nSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(pinwin(n, l));
    return rcpp_result_gen;
END_RCPP
}
// mpinwin
double mpinwin(NumericVector ns, double l);
RcppExport SEXP _memnetr_mpinwin(SEXP nsSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(mpinwin(ns, l));
    return rcpp_result_gen;
END_RCPP
}
// lens
NumericVector lens(GenericVector dat);
RcppExport SEXP _memnetr_lens(SEXP datSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type dat(datSEXP);
    rcpp_result_gen = Rcpp::wrap(lens(dat));
    return rcpp_result_gen;
END_RCPP
}
// mlength
double mlength(GenericVector dat);
RcppExport SEXP _memnetr_mlength(SEXP datSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type dat(datSEXP);
    rcpp_result_gen = Rcpp::wrap(mlength(dat));
    return rcpp_result_gen;
END_RCPP
}
// getplink
NumericVector getplink(NumericMatrix inds, NumericVector probs, double pinwin);
RcppExport SEXP _memnetr_getplink(SEXP indsSEXP, SEXP probsSEXP, SEXP pinwinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type inds(indsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< double >::type pinwin(pinwinSEXP);
    rcpp_result_gen = Rcpp::wrap(getplink(inds, probs, pinwin));
    return rcpp_result_gen;
END_RCPP
}
// dbinom
double dbinom(int k, int n, double p);
RcppExport SEXP _memnetr_dbinom(SEXP kSEXP, SEXP nSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(dbinom(k, n, p));
    return rcpp_result_gen;
END_RCPP
}
// pbinom
double pbinom(int k, int n, double p);
RcppExport SEXP _memnetr_pbinom(SEXP kSEXP, SEXP nSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(pbinom(k, n, p));
    return rcpp_result_gen;
END_RCPP
}
// goni_graph
CharacterMatrix goni_graph(GenericVector dat, int l, int min_cooc, double crit, int use);
RcppExport SEXP _memnetr_goni_graph(SEXP datSEXP, SEXP lSEXP, SEXP min_coocSEXP, SEXP critSEXP, SEXP useSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type dat(datSEXP);
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    Rcpp::traits::input_parameter< int >::type min_cooc(min_coocSEXP);
    Rcpp::traits::input_parameter< double >::type crit(critSEXP);
    Rcpp::traits::input_parameter< int >::type use(useSEXP);
    rcpp_result_gen = Rcpp::wrap(goni_graph(dat, l, min_cooc, crit, use));
    return rcpp_result_gen;
END_RCPP
}
// rw_graph
CharacterMatrix rw_graph(GenericVector dat);
RcppExport SEXP _memnetr_rw_graph(SEXP datSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type dat(datSEXP);
    rcpp_result_gen = Rcpp::wrap(rw_graph(dat));
    return rcpp_result_gen;
END_RCPP
}
// unique_int
std::vector<int> unique_int(std::vector<int> v);
RcppExport SEXP _memnetr_unique_int(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(unique_int(v));
    return rcpp_result_gen;
END_RCPP
}
// rint
int rint(int n);
RcppExport SEXP _memnetr_rint(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(rint(n));
    return rcpp_result_gen;
END_RCPP
}
// runi
double runi();
RcppExport SEXP _memnetr_runi() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(runi());
    return rcpp_result_gen;
END_RCPP
}
// get_adjlist
GenericVector get_adjlist(NumericMatrix adj);
RcppExport SEXP _memnetr_get_adjlist(SEXP adjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type adj(adjSEXP);
    rcpp_result_gen = Rcpp::wrap(get_adjlist(adj));
    return rcpp_result_gen;
END_RCPP
}
// get_neighborhood
NumericMatrix get_neighborhood(NumericMatrix adj, int start, int k);
RcppExport SEXP _memnetr_get_neighborhood(SEXP adjSEXP, SEXP startSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(get_neighborhood(adj, start, k));
    return rcpp_result_gen;
END_RCPP
}
// get_kneighbor
std::vector<int> get_kneighbor(NumericMatrix adj, int start, int k);
RcppExport SEXP _memnetr_get_kneighbor(SEXP adjSEXP, SEXP startSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(get_kneighbor(adj, start, k));
    return rcpp_result_gen;
END_RCPP
}
// tostring
inline Rcpp::CharacterVector tostring(std::vector<int> items);
RcppExport SEXP _memnetr_tostring(SEXP itemsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type items(itemsSEXP);
    rcpp_result_gen = Rcpp::wrap(tostring(items));
    return rcpp_result_gen;
END_RCPP
}
// m_nn
double m_nn(double ele, std::vector<double> set, std::vector<double> rep);
RcppExport SEXP _memnetr_m_nn(SEXP eleSEXP, SEXP setSEXP, SEXP repSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type ele(eleSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type set(setSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type rep(repSEXP);
    rcpp_result_gen = Rcpp::wrap(m_nn(ele, set, rep));
    return rcpp_result_gen;
END_RCPP
}
// m_nc
std::string m_nc(double ele, std::vector<double> set, std::vector<std::string> rep);
RcppExport SEXP _memnetr_m_nc(SEXP eleSEXP, SEXP setSEXP, SEXP repSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type ele(eleSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type set(setSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type rep(repSEXP);
    rcpp_result_gen = Rcpp::wrap(m_nc(ele, set, rep));
    return rcpp_result_gen;
END_RCPP
}
// m_cn
double m_cn(std::string ele, std::vector<std::string> set, std::vector<double> rep);
RcppExport SEXP _memnetr_m_cn(SEXP eleSEXP, SEXP setSEXP, SEXP repSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type ele(eleSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type set(setSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type rep(repSEXP);
    rcpp_result_gen = Rcpp::wrap(m_cn(ele, set, rep));
    return rcpp_result_gen;
END_RCPP
}
// m_cc
std::string m_cc(std::string ele, std::vector<std::string> set, std::vector<std::string> rep);
RcppExport SEXP _memnetr_m_cc(SEXP eleSEXP, SEXP setSEXP, SEXP repSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type ele(eleSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type set(setSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type rep(repSEXP);
    rcpp_result_gen = Rcpp::wrap(m_cc(ele, set, rep));
    return rcpp_result_gen;
END_RCPP
}
// match_nn
std::vector<double> match_nn(std::vector<double> elems, std::vector<double> set, std::vector<double> rep);
RcppExport SEXP _memnetr_match_nn(SEXP elemsSEXP, SEXP setSEXP, SEXP repSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type elems(elemsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type set(setSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type rep(repSEXP);
    rcpp_result_gen = Rcpp::wrap(match_nn(elems, set, rep));
    return rcpp_result_gen;
END_RCPP
}
// match_nc
std::vector<std::string> match_nc(std::vector<double> elems, std::vector<double> set, std::vector<std::string> rep);
RcppExport SEXP _memnetr_match_nc(SEXP elemsSEXP, SEXP setSEXP, SEXP repSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type elems(elemsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type set(setSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type rep(repSEXP);
    rcpp_result_gen = Rcpp::wrap(match_nc(elems, set, rep));
    return rcpp_result_gen;
END_RCPP
}
// match_cn
std::vector<double> match_cn(std::vector<std::string> elems, std::vector<std::string> set, std::vector<double> rep);
RcppExport SEXP _memnetr_match_cn(SEXP elemsSEXP, SEXP setSEXP, SEXP repSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type elems(elemsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type set(setSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type rep(repSEXP);
    rcpp_result_gen = Rcpp::wrap(match_cn(elems, set, rep));
    return rcpp_result_gen;
END_RCPP
}
// match_cc
std::vector<std::string> match_cc(std::vector<std::string> elems, std::vector<std::string> set, std::vector<std::string> rep);
RcppExport SEXP _memnetr_match_cc(SEXP elemsSEXP, SEXP setSEXP, SEXP repSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type elems(elemsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type set(setSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type rep(repSEXP);
    rcpp_result_gen = Rcpp::wrap(match_cc(elems, set, rep));
    return rcpp_result_gen;
END_RCPP
}
// read_texts
StringVector read_texts(CharacterVector paths);
RcppExport SEXP _memnetr_read_texts(SEXP pathsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type paths(pathsSEXP);
    rcpp_result_gen = Rcpp::wrap(read_texts(paths));
    return rcpp_result_gen;
END_RCPP
}
// reads_texts_remove
StringVector reads_texts_remove(CharacterVector paths, std::vector<std::string>& patterns);
RcppExport SEXP _memnetr_reads_texts_remove(SEXP pathsSEXP, SEXP patternsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type paths(pathsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type patterns(patternsSEXP);
    rcpp_result_gen = Rcpp::wrap(reads_texts_remove(paths, patterns));
    return rcpp_result_gen;
END_RCPP
}
// upper_mat_
NumericVector upper_mat_(NumericMatrix mat);
RcppExport SEXP _memnetr_upper_mat_(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(upper_mat_(mat));
    return rcpp_result_gen;
END_RCPP
}
// serialize_tt
IntegerMatrix serialize_tt(IntegerMatrix tt_mat, bool include_diag);
RcppExport SEXP _memnetr_serialize_tt(SEXP tt_matSEXP, SEXP include_diagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type tt_mat(tt_matSEXP);
    Rcpp::traits::input_parameter< bool >::type include_diag(include_diagSEXP);
    rcpp_result_gen = Rcpp::wrap(serialize_tt(tt_mat, include_diag));
    return rcpp_result_gen;
END_RCPP
}
// serialize_td
StringMatrix serialize_td(IntegerMatrix td_mat, bool add_context);
RcppExport SEXP _memnetr_serialize_td(SEXP td_matSEXP, SEXP add_contextSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type td_mat(td_matSEXP);
    Rcpp::traits::input_parameter< bool >::type add_context(add_contextSEXP);
    rcpp_result_gen = Rcpp::wrap(serialize_td(td_mat, add_context));
    return rcpp_result_gen;
END_RCPP
}
// rescorla_wagner
NumericMatrix rescorla_wagner(IntegerMatrix td_mat, bool include_context, bool scramble_order, double gamma, double lambda, double start);
RcppExport SEXP _memnetr_rescorla_wagner(SEXP td_matSEXP, SEXP include_contextSEXP, SEXP scramble_orderSEXP, SEXP gammaSEXP, SEXP lambdaSEXP, SEXP startSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type td_mat(td_matSEXP);
    Rcpp::traits::input_parameter< bool >::type include_context(include_contextSEXP);
    Rcpp::traits::input_parameter< bool >::type scramble_order(scramble_orderSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type start(startSEXP);
    rcpp_result_gen = Rcpp::wrap(rescorla_wagner(td_mat, include_context, scramble_order, gamma, lambda, start));
    return rcpp_result_gen;
END_RCPP
}
// noverk
double noverk(int n, int k);
RcppExport SEXP _memnetr_noverk(SEXP nSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(noverk(n, k));
    return rcpp_result_gen;
END_RCPP
}
// getneighbors
std::vector<int> getneighbors(GenericVector adjlist, int pos);
RcppExport SEXP _memnetr_getneighbors(SEXP adjlistSEXP, SEXP posSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type adjlist(adjlistSEXP);
    Rcpp::traits::input_parameter< int >::type pos(posSEXP);
    rcpp_result_gen = Rcpp::wrap(getneighbors(adjlist, pos));
    return rcpp_result_gen;
END_RCPP
}
// getnext
int getnext(std::vector<int> neighbors);
RcppExport SEXP _memnetr_getnext(SEXP neighborsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type neighbors(neighborsSEXP);
    rcpp_result_gen = Rcpp::wrap(getnext(neighbors));
    return rcpp_result_gen;
END_RCPP
}
// unicut
std::vector<int> unicut(std::vector<int> vs, int n);
RcppExport SEXP _memnetr_unicut(SEXP vsSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type vs(vsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(unicut(vs, n));
    return rcpp_result_gen;
END_RCPP
}
// fluency
std::vector<int> fluency(GenericVector adjlist, int n, double pjump, int type);
RcppExport SEXP _memnetr_fluency(SEXP adjlistSEXP, SEXP nSEXP, SEXP pjumpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type adjlist(adjlistSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type pjump(pjumpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(fluency(adjlist, n, pjump, type));
    return rcpp_result_gen;
END_RCPP
}
// mfluency
GenericVector mfluency(GenericVector adjlist, NumericVector n, double pjump, int type);
RcppExport SEXP _memnetr_mfluency(SEXP adjlistSEXP, SEXP nSEXP, SEXP pjumpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type adjlist(adjlistSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type pjump(pjumpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(mfluency(adjlist, n, pjump, type));
    return rcpp_result_gen;
END_RCPP
}
// ffluency
std::vector<int> ffluency(GenericVector adjlist, int n, double pjump, bool random, bool pref_start);
RcppExport SEXP _memnetr_ffluency(SEXP adjlistSEXP, SEXP nSEXP, SEXP pjumpSEXP, SEXP randomSEXP, SEXP pref_startSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type adjlist(adjlistSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type pjump(pjumpSEXP);
    Rcpp::traits::input_parameter< bool >::type random(randomSEXP);
    Rcpp::traits::input_parameter< bool >::type pref_start(pref_startSEXP);
    rcpp_result_gen = Rcpp::wrap(ffluency(adjlist, n, pjump, random, pref_start));
    return rcpp_result_gen;
END_RCPP
}
// mfsearch
GenericVector mfsearch(GenericVector adjlist, NumericVector n, double pjump, bool random, bool pref_start);
RcppExport SEXP _memnetr_mfsearch(SEXP adjlistSEXP, SEXP nSEXP, SEXP pjumpSEXP, SEXP randomSEXP, SEXP pref_startSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type adjlist(adjlistSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type pjump(pjumpSEXP);
    Rcpp::traits::input_parameter< bool >::type random(randomSEXP);
    Rcpp::traits::input_parameter< bool >::type pref_start(pref_startSEXP);
    rcpp_result_gen = Rcpp::wrap(mfsearch(adjlist, n, pjump, random, pref_start));
    return rcpp_result_gen;
END_RCPP
}
// efluency
std::vector<int> efluency(GenericVector adjlist, int n, double pjump, bool random, bool pref_start);
RcppExport SEXP _memnetr_efluency(SEXP adjlistSEXP, SEXP nSEXP, SEXP pjumpSEXP, SEXP randomSEXP, SEXP pref_startSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type adjlist(adjlistSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type pjump(pjumpSEXP);
    Rcpp::traits::input_parameter< bool >::type random(randomSEXP);
    Rcpp::traits::input_parameter< bool >::type pref_start(pref_startSEXP);
    rcpp_result_gen = Rcpp::wrap(efluency(adjlist, n, pjump, random, pref_start));
    return rcpp_result_gen;
END_RCPP
}
// mesearch
GenericVector mesearch(GenericVector adjlist, NumericVector n, double pjump, bool random, bool pref_start);
RcppExport SEXP _memnetr_mesearch(SEXP adjlistSEXP, SEXP nSEXP, SEXP pjumpSEXP, SEXP randomSEXP, SEXP pref_startSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type adjlist(adjlistSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type pjump(pjumpSEXP);
    Rcpp::traits::input_parameter< bool >::type random(randomSEXP);
    Rcpp::traits::input_parameter< bool >::type pref_start(pref_startSEXP);
    rcpp_result_gen = Rcpp::wrap(mesearch(adjlist, n, pjump, random, pref_start));
    return rcpp_result_gen;
END_RCPP
}
// sfluency
int sfluency(GenericVector adjlist, int n, double pjump, bool random, bool pref_start);
RcppExport SEXP _memnetr_sfluency(SEXP adjlistSEXP, SEXP nSEXP, SEXP pjumpSEXP, SEXP randomSEXP, SEXP pref_startSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type adjlist(adjlistSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type pjump(pjumpSEXP);
    Rcpp::traits::input_parameter< bool >::type random(randomSEXP);
    Rcpp::traits::input_parameter< bool >::type pref_start(pref_startSEXP);
    rcpp_result_gen = Rcpp::wrap(sfluency(adjlist, n, pjump, random, pref_start));
    return rcpp_result_gen;
END_RCPP
}
// mssearch
std::vector<int> mssearch(GenericVector adjlist, NumericVector n, double pjump, bool random, bool pref_start);
RcppExport SEXP _memnetr_mssearch(SEXP adjlistSEXP, SEXP nSEXP, SEXP pjumpSEXP, SEXP randomSEXP, SEXP pref_startSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type adjlist(adjlistSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type pjump(pjumpSEXP);
    Rcpp::traits::input_parameter< bool >::type random(randomSEXP);
    Rcpp::traits::input_parameter< bool >::type pref_start(pref_startSEXP);
    rcpp_result_gen = Rcpp::wrap(mssearch(adjlist, n, pjump, random, pref_start));
    return rcpp_result_gen;
END_RCPP
}
// rwalk
NumericMatrix rwalk(GenericVector adjlist, int start, std::vector<int> observe, int nmax, double pjump);
RcppExport SEXP _memnetr_rwalk(SEXP adjlistSEXP, SEXP startSEXP, SEXP observeSEXP, SEXP nmaxSEXP, SEXP pjumpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type adjlist(adjlistSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type observe(observeSEXP);
    Rcpp::traits::input_parameter< int >::type nmax(nmaxSEXP);
    Rcpp::traits::input_parameter< double >::type pjump(pjumpSEXP);
    rcpp_result_gen = Rcpp::wrap(rwalk(adjlist, start, observe, nmax, pjump));
    return rcpp_result_gen;
END_RCPP
}
// mrwalk
NumericMatrix mrwalk(GenericVector adjlist, int start, std::vector<int> observe, int nrep, bool aggregate, int nmax, double pjump);
RcppExport SEXP _memnetr_mrwalk(SEXP adjlistSEXP, SEXP startSEXP, SEXP observeSEXP, SEXP nrepSEXP, SEXP aggregateSEXP, SEXP nmaxSEXP, SEXP pjumpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type adjlist(adjlistSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type observe(observeSEXP);
    Rcpp::traits::input_parameter< int >::type nrep(nrepSEXP);
    Rcpp::traits::input_parameter< bool >::type aggregate(aggregateSEXP);
    Rcpp::traits::input_parameter< int >::type nmax(nmaxSEXP);
    Rcpp::traits::input_parameter< double >::type pjump(pjumpSEXP);
    rcpp_result_gen = Rcpp::wrap(mrwalk(adjlist, start, observe, nrep, aggregate, nmax, pjump));
    return rcpp_result_gen;
END_RCPP
}
// staSearch
NumericVector staSearch(NumericMatrix x);
RcppExport SEXP _memnetr_staSearch(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(staSearch(x));
    return rcpp_result_gen;
END_RCPP
}
// dynSearch
NumericVector dynSearch(NumericMatrix x);
RcppExport SEXP _memnetr_dynSearch(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(dynSearch(x));
    return rcpp_result_gen;
END_RCPP
}
// notInVector
bool notInVector(int item, std::vector<int> set);
RcppExport SEXP _memnetr_notInVector(SEXP itemSEXP, SEXP setSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type item(itemSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type set(setSEXP);
    rcpp_result_gen = Rcpp::wrap(notInVector(item, set));
    return rcpp_result_gen;
END_RCPP
}
// staSearch2
NumericVector staSearch2(GenericVector x);
RcppExport SEXP _memnetr_staSearch2(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(staSearch2(x));
    return rcpp_result_gen;
END_RCPP
}
// split_stringlist
GenericVector split_stringlist(GenericVector sents, GenericVector indices);
RcppExport SEXP _memnetr_split_stringlist(SEXP sentsSEXP, SEXP indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GenericVector >::type sents(sentsSEXP);
    Rcpp::traits::input_parameter< GenericVector >::type indices(indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(split_stringlist(sents, indices));
    return rcpp_result_gen;
END_RCPP
}
// in_doc
bool in_doc(std::string doc, std::string term, bool space);
RcppExport SEXP _memnetr_in_doc(SEXP docSEXP, SEXP termSEXP, SEXP spaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type doc(docSEXP);
    Rcpp::traits::input_parameter< std::string >::type term(termSEXP);
    Rcpp::traits::input_parameter< bool >::type space(spaceSEXP);
    rcpp_result_gen = Rcpp::wrap(in_doc(doc, term, space));
    return rcpp_result_gen;
END_RCPP
}
// count_in_doc
int count_in_doc(std::string doc, std::string term, bool space);
RcppExport SEXP _memnetr_count_in_doc(SEXP docSEXP, SEXP termSEXP, SEXP spaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type doc(docSEXP);
    Rcpp::traits::input_parameter< std::string >::type term(termSEXP);
    Rcpp::traits::input_parameter< bool >::type space(spaceSEXP);
    rcpp_result_gen = Rcpp::wrap(count_in_doc(doc, term, space));
    return rcpp_result_gen;
END_RCPP
}
// td_unit
IntegerMatrix td_unit(std::vector<std::string> docs, std::vector<std::string> terms);
RcppExport SEXP _memnetr_td_unit(SEXP docsSEXP, SEXP termsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type docs(docsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type terms(termsSEXP);
    rcpp_result_gen = Rcpp::wrap(td_unit(docs, terms));
    return rcpp_result_gen;
END_RCPP
}
// td_count
IntegerMatrix td_count(std::vector<std::string> docs, std::vector<std::string> terms);
RcppExport SEXP _memnetr_td_count(SEXP docsSEXP, SEXP termsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type docs(docsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type terms(termsSEXP);
    rcpp_result_gen = Rcpp::wrap(td_count(docs, terms));
    return rcpp_result_gen;
END_RCPP
}
// tt_unit
IntegerMatrix tt_unit(IntegerMatrix td_mat);
RcppExport SEXP _memnetr_tt_unit(SEXP td_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type td_mat(td_matSEXP);
    rcpp_result_gen = Rcpp::wrap(tt_unit(td_mat));
    return rcpp_result_gen;
END_RCPP
}
// tt_count
IntegerMatrix tt_count(IntegerMatrix td_mat);
RcppExport SEXP _memnetr_tt_count(SEXP td_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type td_mat(td_matSEXP);
    rcpp_result_gen = Rcpp::wrap(tt_count(td_mat));
    return rcpp_result_gen;
END_RCPP
}
// remove_rows
NumericMatrix remove_rows(NumericMatrix mat, std::vector<int> remove);
RcppExport SEXP _memnetr_remove_rows(SEXP matSEXP, SEXP removeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type remove(removeSEXP);
    rcpp_result_gen = Rcpp::wrap(remove_rows(mat, remove));
    return rcpp_result_gen;
END_RCPP
}
// combine_rows
NumericMatrix combine_rows(NumericMatrix mat, NumericMatrix inds, std::string method);
RcppExport SEXP _memnetr_combine_rows(SEXP matSEXP, SEXP indsSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type inds(indsSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(combine_rows(mat, inds, method));
    return rcpp_result_gen;
END_RCPP
}
// triangle_ineq
std::vector<bool> triangle_ineq(NumericMatrix x);
RcppExport SEXP _memnetr_triangle_ineq(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(triangle_ineq(x));
    return rcpp_result_gen;
END_RCPP
}
// cnt_tokens
CharacterMatrix cnt_tokens(std::vector<std::string> words);
RcppExport SEXP _memnetr_cnt_tokens(SEXP wordsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type words(wordsSEXP);
    rcpp_result_gen = Rcpp::wrap(cnt_tokens(words));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_memnetr_count_assos_directed", (DL_FUNC) &_memnetr_count_assos_directed, 2},
    {"_memnetr_count_assos_undirected", (DL_FUNC) &_memnetr_count_assos_undirected, 2},
    {"_memnetr_determine_indices", (DL_FUNC) &_memnetr_determine_indices, 1},
    {"_memnetr_get_A", (DL_FUNC) &_memnetr_get_A, 2},
    {"_memnetr_rowsums", (DL_FUNC) &_memnetr_rowsums, 1},
    {"_memnetr_colsums", (DL_FUNC) &_memnetr_colsums, 1},
    {"_memnetr_P_from_A", (DL_FUNC) &_memnetr_P_from_A, 1},
    {"_memnetr_PPMI_from_P", (DL_FUNC) &_memnetr_PPMI_from_P, 1},
    {"_memnetr_get_P", (DL_FUNC) &_memnetr_get_P, 2},
    {"_memnetr_get_PPMI", (DL_FUNC) &_memnetr_get_PPMI, 2},
    {"_memnetr_get_cosines", (DL_FUNC) &_memnetr_get_cosines, 1},
    {"_memnetr_normalize", (DL_FUNC) &_memnetr_normalize, 1},
    {"_memnetr_chunk", (DL_FUNC) &_memnetr_chunk, 2},
    {"_memnetr_chunk_norm", (DL_FUNC) &_memnetr_chunk_norm, 2},
    {"_memnetr_make_word", (DL_FUNC) &_memnetr_make_word, 1},
    {"_memnetr_split_string_list", (DL_FUNC) &_memnetr_split_string_list, 2},
    {"_memnetr_beagle_basis", (DL_FUNC) &_memnetr_beagle_basis, 3},
    {"_memnetr_beagle_basis_stops", (DL_FUNC) &_memnetr_beagle_basis_stops, 4},
    {"_memnetr_beagle_con", (DL_FUNC) &_memnetr_beagle_con, 5},
    {"_memnetr_cosine", (DL_FUNC) &_memnetr_cosine, 2},
    {"_memnetr_cosine_mat", (DL_FUNC) &_memnetr_cosine_mat, 1},
    {"_memnetr_upper_mat", (DL_FUNC) &_memnetr_upper_mat, 1},
    {"_memnetr_seed", (DL_FUNC) &_memnetr_seed, 2},
    {"_memnetr_sm", (DL_FUNC) &_memnetr_sm, 1},
    {"_memnetr_getdegrees", (DL_FUNC) &_memnetr_getdegrees, 2},
    {"_memnetr_getnonneighbors", (DL_FUNC) &_memnetr_getnonneighbors, 2},
    {"_memnetr_selectnode", (DL_FUNC) &_memnetr_selectnode, 1},
    {"_memnetr_stgame", (DL_FUNC) &_memnetr_stgame, 2},
    {"_memnetr_emptyseed", (DL_FUNC) &_memnetr_emptyseed, 1},
    {"_memnetr_puni", (DL_FUNC) &_memnetr_puni, 0},
    {"_memnetr_unconnectedneighbor", (DL_FUNC) &_memnetr_unconnectedneighbor, 3},
    {"_memnetr_test", (DL_FUNC) &_memnetr_test, 2},
    {"_memnetr_hkgame", (DL_FUNC) &_memnetr_hkgame, 3},
    {"_memnetr_set", (DL_FUNC) &_memnetr_set, 1},
    {"_memnetr_mset", (DL_FUNC) &_memnetr_mset, 1},
    {"_memnetr_indx", (DL_FUNC) &_memnetr_indx, 2},
    {"_memnetr_lags", (DL_FUNC) &_memnetr_lags, 3},
    {"_memnetr_strsplit", (DL_FUNC) &_memnetr_strsplit, 2},
    {"_memnetr_getinds", (DL_FUNC) &_memnetr_getinds, 2},
    {"_memnetr_getpairs", (DL_FUNC) &_memnetr_getpairs, 2},
    {"_memnetr_count", (DL_FUNC) &_memnetr_count, 1},
    {"_memnetr_range", (DL_FUNC) &_memnetr_range, 1},
    {"_memnetr_get_indices", (DL_FUNC) &_memnetr_get_indices, 2},
    {"_memnetr_cut_stringvec", (DL_FUNC) &_memnetr_cut_stringvec, 2},
    {"_memnetr_cut_dat", (DL_FUNC) &_memnetr_cut_dat, 3},
    {"_memnetr_mcount", (DL_FUNC) &_memnetr_mcount, 1},
    {"_memnetr_getprob", (DL_FUNC) &_memnetr_getprob, 2},
    {"_memnetr_pinwin", (DL_FUNC) &_memnetr_pinwin, 2},
    {"_memnetr_mpinwin", (DL_FUNC) &_memnetr_mpinwin, 2},
    {"_memnetr_lens", (DL_FUNC) &_memnetr_lens, 1},
    {"_memnetr_mlength", (DL_FUNC) &_memnetr_mlength, 1},
    {"_memnetr_getplink", (DL_FUNC) &_memnetr_getplink, 3},
    {"_memnetr_dbinom", (DL_FUNC) &_memnetr_dbinom, 3},
    {"_memnetr_pbinom", (DL_FUNC) &_memnetr_pbinom, 3},
    {"_memnetr_goni_graph", (DL_FUNC) &_memnetr_goni_graph, 5},
    {"_memnetr_rw_graph", (DL_FUNC) &_memnetr_rw_graph, 1},
    {"_memnetr_unique_int", (DL_FUNC) &_memnetr_unique_int, 1},
    {"_memnetr_rint", (DL_FUNC) &_memnetr_rint, 1},
    {"_memnetr_runi", (DL_FUNC) &_memnetr_runi, 0},
    {"_memnetr_get_adjlist", (DL_FUNC) &_memnetr_get_adjlist, 1},
    {"_memnetr_get_neighborhood", (DL_FUNC) &_memnetr_get_neighborhood, 3},
    {"_memnetr_get_kneighbor", (DL_FUNC) &_memnetr_get_kneighbor, 3},
    {"_memnetr_tostring", (DL_FUNC) &_memnetr_tostring, 1},
    {"_memnetr_m_nn", (DL_FUNC) &_memnetr_m_nn, 3},
    {"_memnetr_m_nc", (DL_FUNC) &_memnetr_m_nc, 3},
    {"_memnetr_m_cn", (DL_FUNC) &_memnetr_m_cn, 3},
    {"_memnetr_m_cc", (DL_FUNC) &_memnetr_m_cc, 3},
    {"_memnetr_match_nn", (DL_FUNC) &_memnetr_match_nn, 3},
    {"_memnetr_match_nc", (DL_FUNC) &_memnetr_match_nc, 3},
    {"_memnetr_match_cn", (DL_FUNC) &_memnetr_match_cn, 3},
    {"_memnetr_match_cc", (DL_FUNC) &_memnetr_match_cc, 3},
    {"_memnetr_read_texts", (DL_FUNC) &_memnetr_read_texts, 1},
    {"_memnetr_reads_texts_remove", (DL_FUNC) &_memnetr_reads_texts_remove, 2},
    {"_memnetr_upper_mat_", (DL_FUNC) &_memnetr_upper_mat_, 1},
    {"_memnetr_serialize_tt", (DL_FUNC) &_memnetr_serialize_tt, 2},
    {"_memnetr_serialize_td", (DL_FUNC) &_memnetr_serialize_td, 2},
    {"_memnetr_rescorla_wagner", (DL_FUNC) &_memnetr_rescorla_wagner, 6},
    {"_memnetr_noverk", (DL_FUNC) &_memnetr_noverk, 2},
    {"_memnetr_getneighbors", (DL_FUNC) &_memnetr_getneighbors, 2},
    {"_memnetr_getnext", (DL_FUNC) &_memnetr_getnext, 1},
    {"_memnetr_unicut", (DL_FUNC) &_memnetr_unicut, 2},
    {"_memnetr_fluency", (DL_FUNC) &_memnetr_fluency, 4},
    {"_memnetr_mfluency", (DL_FUNC) &_memnetr_mfluency, 4},
    {"_memnetr_ffluency", (DL_FUNC) &_memnetr_ffluency, 5},
    {"_memnetr_mfsearch", (DL_FUNC) &_memnetr_mfsearch, 5},
    {"_memnetr_efluency", (DL_FUNC) &_memnetr_efluency, 5},
    {"_memnetr_mesearch", (DL_FUNC) &_memnetr_mesearch, 5},
    {"_memnetr_sfluency", (DL_FUNC) &_memnetr_sfluency, 5},
    {"_memnetr_mssearch", (DL_FUNC) &_memnetr_mssearch, 5},
    {"_memnetr_rwalk", (DL_FUNC) &_memnetr_rwalk, 5},
    {"_memnetr_mrwalk", (DL_FUNC) &_memnetr_mrwalk, 7},
    {"_memnetr_staSearch", (DL_FUNC) &_memnetr_staSearch, 1},
    {"_memnetr_dynSearch", (DL_FUNC) &_memnetr_dynSearch, 1},
    {"_memnetr_notInVector", (DL_FUNC) &_memnetr_notInVector, 2},
    {"_memnetr_staSearch2", (DL_FUNC) &_memnetr_staSearch2, 1},
    {"_memnetr_split_stringlist", (DL_FUNC) &_memnetr_split_stringlist, 2},
    {"_memnetr_in_doc", (DL_FUNC) &_memnetr_in_doc, 3},
    {"_memnetr_count_in_doc", (DL_FUNC) &_memnetr_count_in_doc, 3},
    {"_memnetr_td_unit", (DL_FUNC) &_memnetr_td_unit, 2},
    {"_memnetr_td_count", (DL_FUNC) &_memnetr_td_count, 2},
    {"_memnetr_tt_unit", (DL_FUNC) &_memnetr_tt_unit, 1},
    {"_memnetr_tt_count", (DL_FUNC) &_memnetr_tt_count, 1},
    {"_memnetr_remove_rows", (DL_FUNC) &_memnetr_remove_rows, 2},
    {"_memnetr_combine_rows", (DL_FUNC) &_memnetr_combine_rows, 3},
    {"_memnetr_triangle_ineq", (DL_FUNC) &_memnetr_triangle_ineq, 1},
    {"_memnetr_cnt_tokens", (DL_FUNC) &_memnetr_cnt_tokens, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_memnetr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
